checkomatic:
  client:
    host: https://platform-api.opentargets.io
    port: 443
    size: 1000 # max size to fetch when query and it is applicable
  rules:
    associations:
      targets:
        ENSG00000165392:
          # Checking if at least 8 disease are associated to target supported by crispr:
          - |-
            parser = jp.parse('data[*].association_score.datasources.crispr')
            supported_by_crispr = [x for x in to_vlist(parser.find(d)) if x != 0]
            output = len(supported_by_crispr) >= 8
          # Checking if crispr scores are high for certain associations for this target:
          - |-
            parser = jp.parse('data[*].disease.efo_info.label')
            diseases_to_test = set(['neoplasm', 'colorectal carcinoma', 'ovarian carcinoma'])
            output = not diseases_to_test - to_vset(parser.find(d))
        BRAF:
          - |-
            parser = jp.parse('data[*].disease.efo_info.label')
            output = 'melanoma' in to_vset(parser.find(d))
        CD86:
          - |-
            parser = jp.parse('data[*].disease.efo_info.label')
            output = 'multiple sclerosis' in to_vset(parser.find(d))    
        ITGAL:
          - |-
            parser = jp.parse('data[*].disease.efo_info.label')
            output = 'inflammatory bowel disease' in to_vset(parser.find(d))
        DMD:
          - |-
            parser = jp.parse('data[*].disease.efo_info.label')
            output = 'Duchenne muscular dystrophy' in to_vset(parser.find(d))    
        AGTR1:
          - |-
            parser = jp.parse('data[*].disease.efo_info.label')
            output = 'COVID-19' in to_vset(parser.find(d))
      diseases:
        # Checking sysbio supported associations.
        EFO_0003767:
          - o.data[0].disease.efo_info.label == 'inflammatory bowel disease'
          - |-
            parser = jp.parse('data[*].association_score.datasources.sysbio')
            sysbio_assoc = [x for x in to_vlist(parser.find(d)) if x > 0]
            output = len(sysbio_assoc) == 211
          - |-
            parser = jp.parse('data[*]')
            genes_to_check = set(['IL10RA', 'APOL2', 'GAB3', 'SNX10'])
            sysbio_assoc = [assoc['target']['gene_info']['symbol'] for assoc in to_vlist(parser.find(d)) if assoc['association_score']['datasources']['sysbio'] > 0]
            output = len(sysbio_assoc) == 211
        EFO_0001071:
          # Checking if at least 110 targets are associated to this disease supported by crispr:
          - |-
            parser = jp.parse('data[*].association_score.datasources.crispr')
            supported_by_crispr = [x for x in to_vlist(parser.find(d)) if x != 0]
            output = len(supported_by_crispr) >= 110
          # Checking if crispr scores are high for certain associations for this disease:
          - |-
            parser = jp.parse('data[*]')
            genes_to_test = set(['ERBB3', 'KRAS', 'RHOA', 'TPT1'])
            genes_supported_by_crispr = [x['target']['gene_info']['symbol'] for x in to_vlist(parser.find(d)) if x['association_score']['datasources']['crispr'] > 0]
            output = not genes_to_test - set(genes_supported_by_crispr)
        EFO_0000178:
          # Checkingif at least 160 targets are associated through crispr
          - |-
            parser = jp.parse('data[*].association_score.datasources.crispr')
            supported_by_crispr = [x for x in to_vlist(parser.find(d)) if x != 0]
            output = len(supported_by_crispr) >= 160
          # Checking if crispr scores are high for certain associations for this disease:
          - |-
            parser = jp.parse('data[*]')
            genes_to_test = set(['FGFR2', 'CCNA2'])
            genes_supported_by_crispr = [x['target']['gene_info']['symbol'] for x in to_vlist(parser.find(d)) if x['association_score']['datasources']['crispr'] > 0]
            output = not genes_to_test - set(genes_supported_by_crispr)   
        EFO_0003767:
          # Checking if a ceratin set of genes is associated with the disease:
          - |-
            parser = jp.parse('data[*].target.gene_info.symbol')
            output = not set(['NOD2', 'IL10RA', 'IL23R', 'IRF5', 'ITGAL']) - to_vset(parser.find(d))
          # Checking if there's strong genetic association with the ofllowing genes:
          - |-
            parser = jp.parse('data[*]')
            gene_sets = ['NOD2', 'IL10RA', 'IL23R', 'IRF5']
            is_genetic_high = [ association['association_score']['datatypes']['genetic_association'] > 0.8 for association in to_vlist(parser.find(d)) if association['target']['gene_info']['symbol'] in gene_sets ]
            output = all(is_genetic_high)
          # Check if the genetic associatin is weak:
          - |-
            parser = jp.parse('data[*]')
            is_genetic_high = [ association['association_score']['datatypes']['genetic_association'] < 0.4 for association in to_vlist(parser.find(d)) if association['target']['gene_info']['symbol'] == 'ITGAL' ]
            output = all(is_genetic_high)
        EFO_0000384:
          # Checking if the following genes are associated with the disease:
          - |-
            parser = jp.parse('data[*].target.gene_info.symbol')
            output = not set(['NOD2', 'SMAD3', 'TNF', 'PTGS2']) - to_vset(parser.find(d))
          # Checking if no genetic evidence supports the association for PTGS2:
          - |-
            parser = jp.parse('data[*]')
            is_genetic_exist = [ 'genetic_association' in association['association_score']['datatypes'] for association in to_vlist(parser.find(d)) if association['target']['gene_info']['symbol'] == 'PTGS2' ]
            output = all(is_genetic_exist)
    searches:
      diseases:
        "Hyperlordosis":
          - len(o.data) > 110
          - |-
            parser = jp.parse('data[*].data.id')
            disease_ids = to_vlist(parser.find(d))
            tested_ids = ["Orphanet_262","Orphanet_253"]
            output = all([x in disease_ids for x in disease_ids])
        "Joint Swelling":
          - ("HP_0001386" in o.data[0].data.id)
          - len(o.data) > 1100
          - |-
            parser = jp.parse('data[*].data.efo_synonyms[*]')
            phenotypes = to_vlist(parser.find(d))
            tested_phenotypes = ["spondyloarthropathy","joint disease","skin disease", "brain disease", "bacterial disease", "ankylosing spondylitis"]
            output = all([x.lower() in phenotypes for x in tested_phenotypes])
    diseases:
      Orphanet_262:
        - o.label == 'Duchenne and Becker muscular dystrophy'
        - ('Severe dystrophinopathy, Duchenne and Becker type' in o.efo_synonyms)
        - ('nervous system disease' in o.therapeutic_labels)
        - |-
          parser = jp.parse('phenotypes[*].label')
          output = 'Gait disturbance' in to_vlist(parser.find(d))
        - |-
          parser = jp.parse('phenotypes[*].label')
          phenotypes = to_vlist(parser.find(d))
          tested_phenotypes = ["Cognitive impairment","EMG abnormality","Developmental regression"]
          output = all([x in phenotypes for x in tested_phenotypes])
      Orphanet_166:
        - |-
          parser = jp.parse('phenotypes[*].label')
          phenotypes = to_vlist(parser.find(d))
          tested_phenotypes = ["Abnormality of the pharynx","Gait disturbance"]
          output = all([x in phenotypes for x in tested_phenotypes])
      EFO_0003885:
        - |-
          parser = jp.parse('phenotypes[*].label')
          phenotypes = to_vlist(parser.find(d))
          tested_phenotypes = ["Abnormality of the immune system", "Optic neuritis", "Age of death"]
          output = all([x in phenotypes for x in tested_phenotypes])
    targets:
      # Testing cancer biomarkers:
      ENSG00000157764:
        - o.approved_symbol == 'BRAF'
        # Test number of entries:
        - len(o.cancerbiomarkers) == 82
        # Test if a given biomarker is found:
        - |-
          parser = jp.parse('cancerbiomarkers[*].references.other[*].name')
          output = "ASCO 2017 (abstr 9072)" in to_vset(parser.find(d))
        # Test if a give filter applied gives the expected results:
        - |-
          parser = jp.parse('cancerbiomarkers[*]')
          biomarkers = []
          [biomarkers.append(biomarker['references']['other'][0]['name']) for biomarker in to_vlist(parser.find(d)) if 
            biomarker['association'] == 'Responsive' and 
            biomarker['evidencelevel'] == "Case report" and 
            len(biomarker['references']['other']) > 0 and 
            biomarker['drugfullname'] == "BRAF inhibitor + MEK inhibitors" 
          ]
          output = "ASCO 2017 (abstr 9072)" in biomarkers
        # Test if there are 24 case reports:
        - |-
          parser = jp.parse('cancerbiomarkers[*]')
          biomarkers = []
          [ biomarkers.append(biomarker) for biomarker in to_vlist(parser.find(d)) if biomarker['evidencelevel'] == "Case report" ]
          output = len(biomarkers) == 24
      # Testing tractability:
      ENSG00000167207:
        - o.approved_symbol == 'NOD2'
        # Check small molecule buckets - in druggable genome:
        - o.tractability.smallmolecule.small_molecule_genome_member
        # Check small molecule buckets - in chembl:
        - o.tractability.smallmolecule.high_quality_compounds > 0
        # Check small molecule buckets - phase 4:
        - o.tractability.smallmolecule.buckets[0] == 1
        # Check antibody buckets:
        - o.tractability.antibody.top_category == "Predicted_Tractable_ab_High_confidence"
        # Check antibody buckets:
        - o.tractability.antibody.buckets == [4,5]
        # Check other modalities:
        - o.tractability.other_modalities.buckets == []
      # Testing tractability:
      ENSG00000114013:
        - o.approved_symbol == 'CD86'
        # Check small molecule buckets - not in druggable genome:
        - not o.tractability.smallmolecule.small_molecule_genome_member
        # Check small molecule buckets - in chembl:
        - o.tractability.smallmolecule.buckets == []
        # Check antibody buckets:
        - o.tractability.antibody.top_category == "Predicted_Tractable_ab_High_confidence"
        # Check antibody buckets:
        - o.tractability.antibody.buckets == [5,6,7]
        # Check other modalities:
        - o.tractability.other_modalities.buckets == [1]
      # Testing target safety annotation:
      ENSG00000151617:
        - o.approved_symbol == 'EDNRA'
        # Find three known side effect:
        - len(o.safety.adverse_effects) == 3
        # Check for effected organs:
        - |-
          parser = jp.parse('safety.adverse_effects[*].organs_systems_affected[*].term_in_paper')
          expected_organs = set(['cardiovascular system','development','cardiovascular','renal','nervous system','gastrointestinal'])
          output = not expected_organs - to_vset(parser.find(d))
        # Testing agonist/activation effect general:
        - |-
          parser = jp.parse('safety.adverse_effects[*].activation_effects[*].general[*].term_in_paper')
          expected_activation = set(['vasoconstriction', 'bronchoconstriction', 'aldosterone secretion', 'increased blood pressure'])
          output = not expected_activation - to_vset(parser.find(d))
        # Testing agonist/activation effect acute dose
        - |-
          parser = jp.parse('safety.adverse_effects[*].activation_effects[*].acute_dosing[*].term_in_paper')
          expected_activation = set(['decreased heart rate', 'increased blood pressure', 'increased cardiac contractility', 'bronchoconstriction'])
          output = not expected_activation - to_vset(parser.find(d))
        # Testing antagonist effects - developmental:
        - |-
          parser = jp.parse('safety.adverse_effects[*].inhibition_effects[*].developmental[*].term_in_paper')
          expected_inhibition = set(['teratogenicity', 'cardiac anomaly', 'abnormal face', 'cleft palate'])
          output = not expected_inhibition - to_vset(parser.find(d))        
        # Testing antagonist effects - acute dose:
        - |-
          parser = jp.parse('safety.adverse_effects[*].inhibition_effects[*].acute_dosing[*].term_in_paper')
          expected_inhibition = set(['increased heart rate', 'decreased blood pressure', 'decreased urine excretion'])
          output = not expected_inhibition - to_vset(parser.find(d))
        # Testing references:
        - |-
          parser = jp.parse('safety.adverse_effects[*].references[*].ref_label')
          expected_references = set(['Urban et al. (2012)', 'HeCaToS', 'Bowes et al. (2012)', 'Lynch et al. (2017)'])
          output = not expected_references - to_vset(parser.find(d))
        # Checking clinical toxicity counts:
        - len(o.safety.experimental_toxicity) == 2
        # Get all toxicity sources:
        - |-
          parser = jp.parse('safety.experimental_toxicity[*].data_source')
          output = 'Tox21' in to_vset(parser.find(d))
        # Checking toxicity experimental details - assay format:
        - |-
          parser = jp.parse('safety.experimental_toxicity[*].experiment_details.assay_format')
          output = 'cell-free' in to_vset(parser.find(d))
        # Checking toxicity experimental details - cell type:
        - |-
          parser = jp.parse('safety.experimental_toxicity[*].experiment_details.cell_short_name')
          output = 'HepG2' in to_vset(parser.find(d))
        # Checking toxicity experimental details - assay format type:
        - |-
          parser = jp.parse('safety.experimental_toxicity[*].experiment_details.assay_format_type')
          output = 'cell-based' in to_vset(parser.find(d))
      # Testing target safety annotation:
      ENSG00000142208:
        - o.approved_symbol == 'AKT1'
        # Find three known side effect:
        - len(o.safety.adverse_effects) == 1
        # Check for effected organs:
        - |-
          parser = jp.parse('safety.adverse_effects[*].organs_systems_affected[*].term_in_paper')
          expected_organs = set(['cardiovascular system'])
          output = not expected_organs - to_vset(parser.find(d))
        # Testing agonist/activation effect general:
        - |-
          parser = jp.parse('safety.adverse_effects[*].activation_effects[*].general[*].term_in_paper')
          output = 'may be cardioprotective' in to_vset(parser.find(d))
        # Testing antagonist effects - developmental:
        - |-
          parser = jp.parse('safety.adverse_effects[*].inhibition_effects[*].general[*].term_in_paper')
          expected_inhibition = set(['hyperglycemia', 'apoptototic cell death in cancer cells'])
          output = not expected_inhibition - to_vset(parser.find(d))        
        # Testing references:
        - |-
          parser = jp.parse('safety.adverse_effects[*].references[*].ref_label')
          expected_references = set(['Urban et al. (2012)', 'HeCaToS'])
          output = not expected_references - to_vset(parser.find(d))
        # Checking clinical toxicity counts:
        - len(o.safety.experimental_toxicity) == 1
        # Get all toxicity sources:
        - |-
          parser = jp.parse('safety.experimental_toxicity[*].data_source')
          output = 'Tox21' in to_vset(parser.find(d))
        # Checking toxicity experimental details - assay format:
        - |-
          parser = jp.parse('safety.experimental_toxicity[*].experiment_details.assay_format')
          output = 'cell-free' in to_vset(parser.find(d))
        # Checking toxicity experimental details - assay format type:
        - |-
          parser = jp.parse('safety.experimental_toxicity[*].experiment_details.assay_format_type')
          output = 'biochemical' in to_vset(parser.find(d))
      # Testing chemical probes:
      ENSG00000005339:
        # Is there all four probes:
        - len( o.chemicalprobes.portalprobes) == 4
        # Are the probes these:
        - |-
          parser = jp.parse('chemicalprobes.portalprobes[*].chemicalprobe')
          probes = set(['A-485','PF-CBP1','I-CBP112','SGC-CBP30'])
          output = not probes - to_vset(parser.find(d))
        # Testing if the links to the probes are there:
        - |-
          parser = jp.parse('chemicalprobes.portalprobes[*]')
          are_there_links = [ 'sourcelinks' in x for x in to_vlist(parser.find(d)) ]
          output = all(are_there_links)
        # Testing if the links are pointing to right directions:
        - |-
          parser = jp.parse('chemicalprobes.portalprobes[*]')
          base_urls = ['http://www.sgc-ffm.uni-frankfurt.de/#!specificprobeoverview/', 'www.chemicalprobes.org/', 'www.thesgc.org/chemical-probes/']
          links_look_good = [source['link'] in [base_url + probe['chemicalprobe'] for base_url in base_urls] for probe in to_vlist(parser.find(d)) for source in probe['sourcelinks'] ]
          output = all(are_there_links)
        # The following targets should be listed as targets for probe:
        - |-
          parser = jp.parse('chemicalprobes.portalprobes[*].note')
          gene_lists = [note.split('targets: ')[1].split(', ') for note in to_vset(parser.find(d)) if len(note.split('targets: ')) > 1]
          gene_set = set()
          [gene_set.add(gene) for gene_list in gene_lists for gene in gene_list ]
          output = not set(['CREBBP', 'EP300']) - gene_set
      ENSG00000167397:
        # Checking drug for gene:
        - |-
          parser = jp.parse('drugs.chembl_drugs[*].synonyms[*]')
          output = 'Coumadin' in to_vlist(parser.find(d))
      ENSG00000135446:
        # Checking if the following cancer hallmark annotation is found:
        - |-
          parser = jp.parse('hallmarks.cancer_hallmarks[*]')
          promoted = [x['label'] for x in to_vlist(parser.find(d)) if x['promote'] ]
          output = 'cell replicative immortality' in promoted
      ENSG00000157764:
        # Checking if the following cancer hallmark annotation is found:
        - |-
          parser = jp.parse('hallmarks.cancer_hallmarks[*]')
          promoted = [x['label'] for x in to_vlist(parser.find(d)) if x['promote'] ]
          output = not set(['proliferative signalling', 'escaping programmed cell death']) - set(promoted)
      ENSG00000139687:
        # Checking if the following cancer hallmark annotation is found - for promote:
        - |-
          parser = jp.parse('hallmarks.cancer_hallmarks[*]')
          promoted = [x['label'] for x in to_vlist(parser.find(d)) if x['promote'] ]
          expected_promoted = set(['suppression of growth', 'escaping programmed cell death', 'change of cellular energetics'])
          output = not expected_promoted - set(promoted)
        # Checking if the following cancer hallmark annotation is found - for supress:
        - |-
          parser = jp.parse('hallmarks.cancer_hallmarks[*]')
          supressed = [ x['label'] for x in to_vlist(parser.find(d)) if x['suppress'] ]
          expected_supressed = set(['invasion and metastasis', 'genome instability and mutations'])
          output = not expected_supressed - set(supressed)
      ENSG00000141736:
        # Checking if the following cancer hallmark annotation is found:
        - |-
          parser = jp.parse('hallmarks.cancer_hallmarks[*]')
          promoted = [x['label'] for x in to_vlist(parser.find(d)) if x['promote'] ]
          expected_promoted = set(['proliferative signalling', 'invasion and metastasis', 'escaping programmed cell death', 'change of cellular energetics'])
          output = not expected_promoted - set(promoted) 
      ENSG00000141510:
        # Checking if the following cancer hallmark annotation is found - for promote:
        - |-
          parser = jp.parse('hallmarks.cancer_hallmarks[*]')
          promoted = [x['label'] for x in to_vlist(parser.find(d)) if x['promote'] ]
          expected_promoted = set(['suppression of growth', 'change of cellular energetics', 'cell replicative immortality', 'escaping programmed cell death'])
          output = not expected_promoted - set(promoted)
        # Checking if the following cancer hallmark annotation is found - for supress:
        - |-
          parser = jp.parse('hallmarks.cancer_hallmarks[*]')
          supressed = [ x['label'] for x in to_vlist(parser.find(d)) if x['suppress'] ]
          expected_supressed = set(['tumour promoting inflammation', 'invasion and metastasis', 'angiogenesis', 'genome instability and mutations', 'cell replicative immortality', 'escaping programmed cell death'])
          output = not expected_supressed - set(supressed)
    evidences:
      # Testing sysbio evidence:
      ENSG00000110324-EFO_0003767:
        - o.data[0].target.gene_info.symbol == 'IL10RA'
        # Test for key driver genes in the sysbio set:
        - |-
          parser = jp.parse('data[*]')
          gene_sets = [ evidence['unique_association_fields']['gene_set'] for evidence in to_vlist(parser.find(d)) if evidence['sourceID'] == 'sysbio' ]
          output = "Intestine Key Driver Genes" in gene_sets
        # Test for the publication supporting sysbio evidence:
        - |-
          parser = jp.parse('data[*]')
          pmids = [ evidence['unique_association_fields']['pmid'] for evidence in to_vlist(parser.find(d)) if evidence['sourceID'] == 'sysbio' ]
          output = "28892060" in pmids
      ENSG00000133112-EFO_0001071:
        # Testing the crispr evidence for this pair:
        - |-
          parser = jp.parse('data[*]')
          crispr_evidence = [evidence['evidence']['resource_score']['value'] for evidence in to_vlist(parser.find(d)) if evidence['sourceID'] == 'crispr']
          output = 0.408333 in crispr_evidence
        - |-
          parser = jp.parse('data[*]')
          crispr_method = [evidence['evidence']['resource_score']['method']['description'] for evidence in to_vlist(parser.find(d)) if evidence['sourceID'] == 'crispr']
          output = "63 targets were prioritised based on CRISPR screens in 11 squamous cell lung carcinoma cell lines." in crispr_method
      ENSG00000145386-EFO_0000178:
        # Testing the crispr evidence for this pair:
        - |-
          parser = jp.parse('data[*]')
          crispr_evidence = [evidence['evidence']['resource_score']['value'] for evidence in to_vlist(parser.find(d)) if evidence['sourceID'] == 'crispr']
          output = 0.545227 in crispr_evidence
        - |-
          parser = jp.parse('data[*]')
          crispr_method = [evidence['evidence']['resource_score']['method']['description'] for evidence in to_vlist(parser.find(d)) if evidence['sourceID'] == 'crispr']
          output = "168 targets were prioritised based on CRISPR screens in 18 gastric carcinoma cell lines." in crispr_method
      ENSG00000165392-EFO_1001951:
        # Testing the crispr evidence for this pair:
        - |-
          parser = jp.parse('data[*]')
          crispr_evidence = [evidence['evidence']['resource_score']['value'] for evidence in to_vlist(parser.find(d)) if evidence['sourceID'] == 'crispr']
          output = 0.7375 in crispr_evidence
        - |-
          parser = jp.parse('data[*]')
          crispr_method = [evidence['evidence']['resource_score']['method']['description'] for evidence in to_vlist(parser.find(d)) if evidence['sourceID'] == 'crispr']
          output = "147 targets were prioritised based on CRISPR screens in 31 colorectal carcinoma cell lines." in crispr_method    
      ENSG00000166278-EFO_0001365:
        # Testing if a given variant is in the evidence set:
        - |-
          parser = jp.parse('data[*].unique_association_fields.variant_id')
          output = 'rs547154' in to_vlist(parser.find(d))
        # Testing if a given variant is protective in EVA
        - |-
          parser = jp.parse('data[*]')
          clinical_significance = [x['evidence']['variant2disease']['clinical_significance'] for x in to_vlist(parser.find(d)) if x['sourceID'] == "eva" and x['unique_association_fields']['variant_id'] == 'rs547154']
          output = 'protective' in clinical_significance
        # Testing for sequence ontology term: intron variant
        - |-
          parser = jp.parse('data[*]')
          evidence_codes = [x['evidence']['evidence_codes'] for x in to_vlist(parser.find(d)) if x['unique_association_fields']['variant_id'] == 'rs547154']
          output = b'SO_0001627' in evidence_codes[0]
      ENSG00000198901-EFO_0006318:
        # Testing if a given variant is in the evidence set:
        - |-
          parser = jp.parse('data[*].unique_association_fields.variant_id')
          output = 'rs10520699' in to_vlist(parser.find(d))
        # Testing if a given variant is association in EVA
        - |-
          parser = jp.parse('data[*]')
          clinical_significance = [x['evidence']['variant2disease']['clinical_significance'] for x in to_vlist(parser.find(d)) if x['sourceID'] == "eva" and x['unique_association_fields']['variant_id'] == 'rs10520699']
          output = 'association' in clinical_significance
        # Testing for sequence ontology term: intron variant
        - |-
          parser = jp.parse('data[*]')
          evidence_codes = [x['evidence']['evidence_codes'] for x in to_vlist(parser.find(d)) if x['unique_association_fields']['variant_id'] == 'rs10520699']
          output = b'SO_0001627' in evidence_codes[0]  
      ENSG00000169738-Orphanet_2843:
        # Testing if a given variant is in the evidence set:
        - |-
          parser = jp.parse('data[*].unique_association_fields.variant_id')
          output = 'rs375243154' in to_vlist(parser.find(d))
        # Testing if a given variant is "Affects" in EVA
        - |-
          parser = jp.parse('data[*]')
          clinical_significance = [x['evidence']['variant2disease']['clinical_significance'] for x in to_vlist(parser.find(d)) if x['sourceID'] == "eva" and x['unique_association_fields']['variant_id'] == 'rs375243154']
          output = 'Affects' in clinical_significance
        # Testing for sequence ontology term: splice donor variant
        - |-
          parser = jp.parse('data[*]')
          evidence_codes = [x['evidence']['evidence_codes'] for x in to_vlist(parser.find(d)) if x['unique_association_fields']['variant_id'] == 'rs375243154']
          output = b'SO_0001575' in evidence_codes[0]          
      ENSG00000197408-EFO_0006906:
        # Testing if a given variant is in the evidence set:
        - |-
          parser = jp.parse('data[*].unique_association_fields.variant_id')
          output = 'rs281864907' in to_vlist(parser.find(d))
        # Testing if a given variant is drug response in EVA
        - |-
          parser = jp.parse('data[*]')
          clinical_significance = [x['evidence']['variant2disease']['clinical_significance'] for x in to_vlist(parser.find(d)) if x['sourceID'] == "eva" and x['unique_association_fields']['variant_id'] == 'rs281864907']
          output = 'drug response' in clinical_significance
        # Testing for sequence ontology term: stop gained variant
        - |-
          parser = jp.parse('data[*]')
          evidence_codes = [x['evidence']['evidence_codes'] for x in to_vlist(parser.find(d)) if x['unique_association_fields']['variant_id'] == 'rs281864907']
          output = b'SO_0001587' in evidence_codes[0]           
      ENSG00000110435-Orphanet_255182:
        # Testing if a given variant is in the evidence set:
        - |-
          parser = jp.parse('data[*].unique_association_fields.variant_id')
          output = 'rs724159829' in to_vlist(parser.find(d))
        # Testing if a given variant is "Pathogenic" in EVA
        - |-
          parser = jp.parse('data[*]')
          clinical_significance = [x['evidence']['variant2disease']['clinical_significance'] for x in to_vlist(parser.find(d)) if x['sourceID'] == "eva" and x['unique_association_fields']['variant_id'] == 'rs724159829']
          output = 'Pathogenic' in clinical_significance
        # Testing for sequence ontology term: splice donor variant
        - |-
          parser = jp.parse('data[*]')
          evidence_codes = [x['evidence']['evidence_codes'] for x in to_vlist(parser.find(d)) if x['unique_association_fields']['variant_id'] == 'rs724159829']
          output = b'SO_0001575' in evidence_codes[0]          
      ENSG00000164953-Orphanet_564:
        # Testing if a given variant is in the evidence set:
        - |-
          parser = jp.parse('data[*].unique_association_fields.variant_id')
          output = 'rs386834191' in to_vlist(parser.find(d))
        # Testing if a given variant is "Likely pathogenic" in EVA
        - |-
          parser = jp.parse('data[*]')
          clinical_significance = [x['evidence']['variant2disease']['clinical_significance'] for x in to_vlist(parser.find(d)) if x['sourceID'] == "eva" and x['unique_association_fields']['variant_id'] == 'rs386834191']
          output = 'Likely pathogenic' in clinical_significance
        # Testing for sequence ontology term: splice donor variant
        - |-
          parser = jp.parse('data[*]')
          evidence_codes = [x['evidence']['evidence_codes'] for x in to_vlist(parser.find(d)) if x['unique_association_fields']['variant_id'] == 'rs386834191']
          output = b'SO_0001589' in evidence_codes[0]          
      ENSG00000167207-EFO_0003767:
        - |-
          parser = jp.parse('data[*].type')
          genetics = [x for x in to_vlist(parser.find(d)) if x == "genetic_association"]
          output = len(genetics) > 50
      ENSG00000206172-Orphanet_93616:
        - |-
          parser = jp.parse('data[*].unique_association_fields.variant_id')
          output = 'rs35672478' in to_vlist(parser.find(d))
        - |-
          parser = jp.parse('data[*].unique_association_fields.variant_id')
          output = 'rs28928878' in to_vlist(parser.find(d))
      ENSG00000244734-Orphanet_848:
        - |-
          parser = jp.parse('data[*].sourceID')
          uniprot_literature = [x for x in to_vlist(parser.find(d)) if x == "uniprot_literature"]
          output = len(uniprot_literature) >= 5
        - |-
          parser = jp.parse('data[*].sourceID')
          genomics_england = [x for x in to_vlist(parser.find(d)) if x == "genomics_england"]
          output = len(genomics_england) >= 4
        - |-
          parser = jp.parse('data[*].sourceID')
          eva = [x for x in to_vlist(parser.find(d)) if x == "eva"]
          output = len(eva) >= 5
      ENSG00000188536-Orphanet_846:
        - |-
          parser = jp.parse('data[*].sourceID')
          uniprot_literature = [x for x in to_vlist(parser.find(d)) if x == "uniprot_literature"]
          output = len(uniprot_literature) >= 1
        - |-
          parser = jp.parse('data[*].sourceID')
          genomics_england = [x for x in to_vlist(parser.find(d)) if x == "genomics_england"]
          output = len(genomics_england) >= 4
        - |-
          parser = jp.parse('data[*].sourceID')
          eva = [x for x in to_vlist(parser.find(d)) if x == "eva"]
          output = len(eva) >= 20
      ENSG00000001626-Orphanet_586:
        - |-
          parser = jp.parse('data[*].sourceID')
          uniprot_literature = [x for x in to_vlist(parser.find(d)) if x == "uniprot_literature"]
          output = len(uniprot_literature) >= 1
        - |-
          parser = jp.parse('data[*].sourceID')
          genomics_england = [x for x in to_vlist(parser.find(d)) if x == "genomics_england"]
          output = len(genomics_england) >= 2
        - |-
          parser = jp.parse('data[*].sourceID')
          eva = [x for x in to_vlist(parser.find(d)) if x == "eva"]
          output = len(eva) >= 20
        - |-
          parser = jp.parse('data[*].unique_association_fields.variant_id')
          output = 'rs75527207' in to_vlist(parser.find(d))
      ENSG00000204842-Orphanet_98756:
        - |-
          parser = jp.parse('data[*].unique_association_fields.clinvarAccession')
          output = 'RCV000055892' in to_vlist(parser.find(d))
        - |-
          parser = jp.parse('data[*]')
          so_set = [ evidence['evidence']['evidence_codes'] for evidence in to_vlist(parser.find(d)) if evidence['unique_association_fields']['variant_id'] == 'RCV000055892']
          output = 'SO_0002165' in so_set[0]
      ENSG00000104936-Orphanet_273:
        - |-
          parser = jp.parse('data[*].unique_association_fields.clinvarAccession')
          output = 'RCV000005352' in to_vlist(parser.find(d))
        - |-
          parser = jp.parse('data[*]')
          so_set = [ evidence['evidence']['evidence_codes'] for evidence in to_vlist(parser.find(d)) if evidence['unique_association_fields']['variant_id'] == 'RCV000005352']
          output = 'SO_0002165' in so_set[0]
      ENSG00000102081-Orphanet_908:
        - |-
          parser = jp.parse('data[*].unique_association_fields.clinvarAccession')
          output = 'RCV000010651' in to_vlist(parser.find(d))
        - |-
          parser = jp.parse('data[*]')
          so_set = [ evidence['evidence']['evidence_codes'] for evidence in to_vlist(parser.find(d)) if evidence['unique_association_fields']['variant_id'] == 'RCV000010651']
          output = 'SO_0002165' in so_set[0]
      ENSG00000102081-Orphanet_93256:
        - |-
          parser = jp.parse('data[*].unique_association_fields.clinvarAccession')
          output = 'RCV000010652' in to_vlist(parser.find(d))
        - |-
          parser = jp.parse('data[*]')
          so_set = [ evidence['evidence']['evidence_codes'] for evidence in to_vlist(parser.find(d)) if evidence['unique_association_fields']['variant_id'] == 'RCV000010652']
          output = 'SO_0002165' in so_set[0]
      ENSG00000155966-Orphanet_100973:
        - |-
          parser = jp.parse('data[*].unique_association_fields.variant_id')
          output = 'rs193922937' in to_vlist(parser.find(d))
        - |-
          parser = jp.parse('data[*]')
          so_set = [ evidence['evidence']['evidence_codes'] for evidence in to_vlist(parser.find(d)) if evidence['unique_association_fields']['variant_id'] == 'rs193922937']
          output = 'SO_0002165' in so_set[0]
      ENSG00000197386-Orphanet_399:
        - |-
          parser = jp.parse('data[*].unique_association_fields.variant_id')
          output = 'rs71180116' in to_vlist(parser.find(d))
        - |-
          parser = jp.parse('data[*]')
          so_set = [ evidence['evidence']['evidence_codes'] for evidence in to_vlist(parser.find(d)) if evidence['unique_association_fields']['variant_id'] == 'rs71180116']
          output = 'SO_0002165' in so_set[0]


